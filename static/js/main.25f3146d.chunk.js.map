{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Common/Paginator/Paginator.module.css","components/Users/User.module.css","components/Dialogs/Dialogs.module.css","assets/preloader.svg","components/Common/Preloader/Preloader.tsx","redux/dialogs-reducer.ts","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","utils/validators/validators.ts","components/Common/FormsControls/FormsControls.tsx","components/Dialogs/Forms/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","assets/logo.svg","components/Header/Header.tsx","api/api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Forms/LoginReduxForm.tsx","components/Login/Login.tsx","assets/loginNav.svg","assets/messagesNav.svg","assets/profileNav.svg","assets/usersNav.svg","components/Navbar/Navbar.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/user.svg","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/users-selectors.ts","utils/object-helpers.ts","redux/users-reducer.ts","assets/rightArrow.svg","assets/leftArrow.svg","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/app-reducer.ts","App.tsx","reportWebVitals.js","redux/store.ts","index.js","components/Common/FormsControls/FormsControls.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["module","exports","Preloader","src","preloader","initialState","dialogs","id","name","messages","message","newPostText","Messages","props","className","s","DialogItem","dialog","active","to","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","styles","formControl","TextArea","restProps","Input","createField","placeholder","validators","component","text","Field","validate","maxLen","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Dialogs","messagesPage","dialogsElements","map","d","messagesElements","m","Message","dialogsItems","addMessage","mstp","state","isAuth","auth","withAuthRedirect","Component","connect","DialogsContainer","compose","dispatch","type","addMessageActionCreator","Header","logo","backgroundImage","logoImage","header","logoImg","style","loginBlock","loginBlockContainer","loginName","login","line","onClick","logoutTC","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unFollow","delete","profileAPI","console","warn","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","email","password","rememberMe","captcha","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserDataThunkCreator","a","resultCode","getCaptchaUrl","url","HeaderContainer","this","React","HeaderContainerWrap","LoginReduxForm","formSubmissoinError","loginTC","stopSubmit","_error","links","img","profileNav","messagesNav","usersNav","loginNav","Navbar","nav","el","itemContainer","link","activeClassName","activeLink","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","likesCount","setStatusAC","getUserProfileThunkCreator","AddNewPostFormRedux","Post","item","like","MyPosts","memo","log","postsElements","p","postsBlock","addPost","MyPostsContainer","profilePage","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","reduxStatus","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatusThunkCreator","ProfileDataFormReduxForm","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","saveProflie","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","initialValue","Profile","content","ProfileContainer","match","params","authorizedUserId","history","push","getStatusThunkCreator","refreshProfile","prevProps","WithProfileContainer","file","getState","Promise","reject","withRouter","createSelector","userPage","users","filter","u","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","updateObjectInArray","items","itemId","objPropName","newObjProps","FOLLOWING_IN_PROGRESS","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","followingInProgressAC","followUnFollowFlow","apiMethod","actionCreator","Paginator","onPageChanged","portionSize","rightArrow","rightArrowImg","leftArrow","leftArrowImg","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","arrowLeftContainer","arrowLeft","selectedPage","page","arrowRightContainer","arrowRight","User","user","avatar","small","userInfo","userName","buttonContainer","followed","buttonFollowUnfollow","disabled","some","Users","usersPageContainer","userContainer","UsersContainer","pageNumber","getUsersThunkCreator","bind","totalCount","INITIALIZED_SUCCESS","initialized","App","catchAllUnHandledErrors","alert","initializeApp","window","addEventListener","removeEventListener","exact","path","render","Login","app","promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","postId","formReducer","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25f3146d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1kNVy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1_t6i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1-OnL\",\"pages\":\"Paginator_pages__32lYO\",\"page\":\"Paginator_page__3znQI\",\"selectedPage\":\"Paginator_selectedPage__notKK\",\"arrowRight\":\"Paginator_arrowRight__fbKSs\",\"arrowLeft\":\"Paginator_arrowLeft__1kex1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"User_userPage__15qUe\",\"userPhoto\":\"User_userPhoto__nv6hZ\",\"userInfo\":\"User_userInfo__1vZeY\",\"userId\":\"User_userId__juthQ\",\"userName\":\"User_userName__3445f\",\"buttonFollowUnfollow\":\"User_buttonFollowUnfollow__zUONy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2l3oF\",\"dialogsItems\":\"Dialogs_dialogsItems__1eb_z\",\"dialog\":\"Dialogs_dialog__3hTO0\",\"active\":\"Dialogs_active__3BvGC\",\"messages\":\"Dialogs_messages__3tG52\",\"message\":\"Dialogs_message__1lzfF\"};","export default __webpack_public_path__ + \"static/media/preloader.b767aab4.svg\";","import React from \"react\";\nimport preloader from \"./../../../assets/preloader.svg\";\n\nlet Preloader: React.FC = () => {\n    return(\n        <img src={preloader} /> \n    )\n}\n\nexport default Preloader;","export type AddMessageActionType = {\n  type: \"ADD-MESSAGE\";\n  text: string;\n};\n\nexport type DialogsType = {\n  id: number;\n  name: string;\n};\nexport type MessagesType = {\n  id: number;\n  message: string;\n};\n\nexport type DialogsReducerActionsType = AddMessageActionType;\n\nexport type MessagesPageType = {\n  dialogs: Array<DialogsType>;\n  messages: Array<MessagesType>;\n  newPostText: string;\n};\n\nlet initialState: MessagesPageType = {\n  dialogs: [\n    { id: 1, name: \"Dimych\" },\n    { id: 2, name: \"Sveta\" },\n    { id: 3, name: \"Sasha\" },\n    { id: 4, name: \"Andrey\" },\n    { id: 5, name: \"Viktor\" },\n    { id: 6, name: \"Valera\" },\n  ],\n  messages: [\n    { id: 1, message: \"Hi\" },\n    { id: 2, message: \"how is your it-kamasutra\" },\n    { id: 3, message: \"yo\" },\n    { id: 4, message: \"yo\" },\n    { id: 5, message: \"yo\" },\n  ],\n  newPostText: \"\",\n};\n\nexport const dialogReducer = (state = initialState, action: DialogsReducerActionsType): MessagesPageType => {\n  switch (action.type) {\n    case \"ADD-MESSAGE\":\n      return {\n        ...state,\n        newPostText: \"\",\n        messages: [\n          ...state.messages,\n          {\n            id: 6,\n            message: action.text,\n          },\n        ],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addMessageActionCreator = (text: string): AddMessageActionType => {\n  return {\n    type: \"ADD-MESSAGE\",\n    text,\n  };\n};\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\";\n\ntype MessagesType = {\n    message: string\n}\n\nconst Messages: React.FC<MessagesType> = (props) => {\n    return <div className={s.message}>{props.message}</div>;\n  };\n\nexport default Messages;","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\";\n\ntype DialogItemType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: React.FC<DialogItemType> = (props) => {\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required = (value: string) => {\r\n  if (value) return undefined;\r\n\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n","import React, { ComponentType } from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form/lib/Field\";\r\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n  input: string;\r\n  meta: WrappedFieldMetaProps;\r\n};\r\n\r\nexport const FormControl: React.FC<PropsType> = ({\r\n  input,\r\n  meta: { touched, error },\r\n  children,\r\n  ...props\r\n}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n      <div>{children}</div>\r\n      <div>{hasError && <span>{error}</span>}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TextArea: React.FC<PropsType> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\nexport const Input: React.FC<PropsType> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  placeholder: string | null,\r\n  name: string,\r\n  validators: Array<FieldValidatorType>,\r\n  component: React.FC<any>,\r\n  props = {},\r\n  text: string = \"\"\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        validate={validators}\r\n        placeholder={placeholder}\r\n        name={name}\r\n        component={component}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { TextArea } from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLen = maxLengthCreator(30);\r\n\r\nconst AddMessageForm = (props: InjectedFormProps) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        validate={[required, maxLen]}\r\n        placeholder=\"Enter your message\"\r\n        name={\"addMessage\"}\r\n        component={TextArea}\r\n      />\r\n      <button>Add message</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm({ form: \"addMessage\" })(\r\n  AddMessageForm\r\n);\r\n","import React from \"react\";\nimport Messages from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport s from \"./Dialogs.module.css\";\nimport {\n  DialogsType,\n  MessagesPageType,\n  MessagesType,\n} from \"../../redux/dialogs-reducer\";\nimport { Redirect } from \"react-router\";\nimport { Field, Form, reduxForm } from \"redux-form\";\nimport { AddMessageFormRedux } from \"./Forms/AddMessageForm\";\n\nexport type DialogsPageType = {\n  newPostText: string;\n  messagesPage: MessagesPageType;\n  addMessage: (a: string) => void;\n  isAuth: boolean;\n};\n\nexport type NewMessageFormValuesType = {\n  addMessage: string\n}\n\nconst Dialogs: React.FC<DialogsPageType> = (props) => {\n  let messagesPage = props.messagesPage;\n\n  let onAddMessageHandler = (value: any) => {\n    props.addMessage(value.addMessage);\n  };\n\n  let dialogsElements = messagesPage.dialogs.map((d: DialogsType) => (\n    <DialogItem name={d.name} id={d.id} />\n  ));\n  let messagesElements = messagesPage.messages.map((m: MessagesType) => (\n    <Messages message={m.message} />\n  ));\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        {messagesElements}\n        <AddMessageFormRedux onSubmit={onAddMessageHandler} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { RootStoreType } from \"../redux/store\";\r\n\r\ntype mstpType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nfunction mstp(state: RootStoreType): mstpType {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n}\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  function RedirectComponent(props: mstpType) {\r\n    const { isAuth, ...restProps } = props;\r\n\r\n    if (!props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n    return <Component {...(restProps as T)} />;\r\n  }\r\n\r\n  return connect(mstp)(RedirectComponent);\r\n}\r\n\r\nexport default withAuthRedirect;\r\n","import { addMessageActionCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs, { DialogsPageType } from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AppActionsType, RootStoreType } from \"../../redux/store\";\nimport { compose, Dispatch } from \"redux\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\n\nlet mapStateToProps = (state: RootStoreType) => {\n  return {\n    newPostText: state.messagesPage.newPostText,\n    messagesPage: state.messagesPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch<AppActionsType>) => {\n  return {\n    addMessage: (text: string) => {\n      dispatch(addMessageActionCreator(text));\n    },\n  };\n};\n\nexport const DialogsContainer:any = compose(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps)\n)(Dialogs);\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n\n// const DialogsContainer = connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(AuthRedirectComponent);\n","export default __webpack_public_path__ + \"static/media/logo.b0d68e1f.svg\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Header.module.css\";\nimport logoImage from \"../../assets/logo.svg\";\n\ntype HeaderPropsType = {\n  isAuth: boolean;\n  login: string | null;\n  logoutTC: () => void;\n};\n\nconst Header: React.FC<HeaderPropsType> = (props) => {\n  const logo = { backgroundImage: `url(${logoImage})` };\n  return (\n    <header className={s.header}>\n      <div className={s.logoImg} style={logo} />\n      <div className={s.loginBlock}>\n        {props.isAuth ? (\n          <div className={s.loginBlockContainer}>\n            <div className={s.loginName}>{props.login}</div>\n            <div className={s.line}></div>\n            <button onClick={props.logoutTC}>Log out</button>\n          </div>\n        ) : (\n          <NavLink to={\"/login\"}>Login</NavLink>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\r\nimport { ProfilePutTypes } from \"./types\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"5b802dfc-8175-4671-99bf-e30ddb894d16\",\r\n  },\r\n});\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n    return instance\r\n      .get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then((response) => response.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance.post(`follow/${userId}`);\r\n  },\r\n  unFollow(userId: number) {\r\n    return instance.delete(`follow/${userId}`);\r\n  },\r\n  profileAPI(userId: string) {\r\n    console.warn(\"Obsolete method. Use profileAPI\");\r\n    return profileAPI.getProfile(userId);\r\n  },\r\n};\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: string) {\r\n    return instance.get(`profile/${userId}`).then((response) => response);\r\n  },\r\n  getStatus(userId: string) {\r\n    return instance.get(`profile/status/${userId}`);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put(`profile/status`, { status });\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n\r\n    return instance.put(\"/profile/photo\", formData, {\r\n      headers: {\r\n        \"Content-type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n  },\r\n  saveProfile(profile: ProfilePutTypes) {\r\n    return instance.put(`profile`, profile);\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  authMeAPI() {\r\n    return instance.get(`auth/me`).then((response) => response.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: null | string = null\r\n  ) {\r\n    return instance.post(`auth/login`, {\r\n      email,\r\n      password,\r\n      rememberMe,\r\n      captcha,\r\n    });\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`);\r\n  },\r\n};\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance.get(`security/get-captcha-url`);\r\n  },\r\n};\r\n","import { AxiosResponse } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { stopSubmit } from \"redux-form\";\nimport { authAPI, securityAPI } from \"../api/api\";\nimport { loginAuthPostType } from \"../api/types\";\nimport { AppActionsType } from \"./store\";\n\nlet SET_USER_DATA = \"social-network/auth/SET_USER_DATA\";\nlet GET_CAPTCHA_URL_SUCCESS = \"social-network/auth/GET_CAPTCHA_URL_SUCCESS\";\n\nexport type AuthStateType = {\n  userId: string | null;\n  email: string | null;\n  login: string | null;\n  isAuth: boolean;\n  captchaUrl: null | string;\n};\n\nlet initialState: AuthStateType = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null,\n};\n\nexport const authReducer = (\n  state = initialState,\n  action: AuthReducerActionsType\n): AuthStateType => {\n  switch (action.type) {\n    case GET_CAPTCHA_URL_SUCCESS:\n    case SET_USER_DATA: {\n      return { ...state, ...action.payload };\n    }\n    default:\n      return state;\n  }\n};\n\nexport type AuthReducerActionsType = SetAuthUserDataType | getCaptchaUrlSuccessType;\n\nexport type SetAuthUserDataType = ReturnType<typeof setAuthUserData>;\nexport type getCaptchaUrlSuccessType = ReturnType<typeof getCaptchaUrlSuccess>;\n\nexport const setAuthUserData = (\n  userId: string | null,\n  email: string | null,\n  login: string | null,\n  isAuth: boolean\n) => {\n  return {\n    type: SET_USER_DATA,\n    payload: { userId, email, login, isAuth },\n  };\n};\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => {\n  return {\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: { captchaUrl },\n  };\n};\n\n//Thunks\n\nexport const getAuthUserDataThunkCreator = () => {\n  return async (dispatch: Dispatch<AuthReducerActionsType>) => {\n    let response = await authAPI.authMeAPI();\n    if (response.resultCode === 0) {\n      let { id, email, login } = response.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  };\n};\n\nexport const loginTC = (\n  email: string,\n  password: string,\n  rememberMe: boolean,\n  captcha: string\n) => {\n  return async (dispatch: Dispatch<any>) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha);\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserDataThunkCreator());\n    } else {\n      if (response.data.resultCode === 10) {\n        dispatch(getCaptchaUrl());\n      }\n      let message =\n        response.data.messages.length > 0\n          ? response.data.messages[0]\n          : \"some error\";\n      dispatch(stopSubmit(\"login\", { _error: message }));\n    }\n  };\n};\n\nexport const logoutTC = () => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    let response = await authAPI.logout();\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  };\n};\nexport const getCaptchaUrl = () => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    let response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\n  };\n};\n","import React, { ComponentType } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport { setAuthUserData, logoutTC } from \"../../redux/auth-reducer\";\nimport { RootStoreType } from \"../../redux/store\";\n\ntype HeaderContainerType = {\n  isAuth: boolean;\n  login: string | null;\n  setAuthUserData: (id: string, email: string, login: string) => void;\n  getAuthUserDataThunkCreator: () => void;\n  logoutTC: () => void;\n};\n\nclass HeaderContainer extends React.Component<HeaderContainerType> {\n  render() {\n    return <Header {...this.props} />;\n  }\n}\n\nlet mapStateToProps = (state: RootStoreType): any => {\n  return {\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n  };\n};\n\nexport const HeaderContainerWrap:any = connect(mapStateToProps, {\n  setAuthUserData,\n  logoutTC,\n})(HeaderContainer);\n","import { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { createField, Input } from \"../../Common/FormsControls/FormsControls\";\r\nimport styles from \"../../Common/FormsControls/FormsControls.module.css\";\r\n\r\ntype LoginFormPropsType = {\r\n  handleSubmit: () => void;\r\n  error: boolean;\r\n  captchaUrl: string | null;\r\n};\r\n\r\nconst maxLen = maxLengthCreator(100);\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }: any) => {\r\n  //any\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        {createField(\"Email\", \"email\", [required], Input)}\r\n        {createField(\"Password\", \"password\", [required], Input, {\r\n          type: \"password\",\r\n        })}\r\n        {createField(\r\n          null,\r\n          \"rememberMe\",\r\n          [],\r\n          Input,\r\n          { type: \"checkbox\" },\r\n          \"remember me\"\r\n        )}\r\n        {captchaUrl && <img src={captchaUrl} />}\r\n        {captchaUrl &&\r\n          createField(\"Symbols from image\", \"captcha\", [required], Input)}\r\n        {error && <div className={styles.formSubmissoinError}>{error}</div>}\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const LoginReduxForm: any = reduxForm({ form: \"login\" })(LoginForm);\r\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { LoginReduxForm } from \"./Forms/LoginReduxForm\";\nimport { loginTC } from \"../../redux/auth-reducer\";\nimport { RootStoreType } from \"../../redux/store\";\nimport { Redirect } from \"react-router\";\n\ntype LoginPropsType = {\n  loginTC: (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n  ) => Promise<void>;\n  captchaUrl: string | null;\n  isAuth: boolean;\n};\n\ntype formDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n};\n\nconst Login = ({ isAuth, loginTC, captchaUrl }: LoginPropsType) => {\n  const onSubmit = (formData: formDataType) => {\n    loginTC(\n      formData.email,\n      formData.password,\n      formData.rememberMe,\n      formData.captcha\n    );\n  };\n\n  if (isAuth) {\n    <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n    </div>\n  );\n};\n\nlet mapStateToProps = (state: RootStoreType) => {\n  return {\n    captchaUrl: state.auth.captchaUrl,\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default connect(mapStateToProps, { loginTC })(Login);\n","export default __webpack_public_path__ + \"static/media/loginNav.49e3b1e6.svg\";","export default __webpack_public_path__ + \"static/media/messagesNav.8085f152.svg\";","export default __webpack_public_path__ + \"static/media/profileNav.cda056b3.svg\";","export default __webpack_public_path__ + \"static/media/usersNav.321ba854.svg\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Navbar.module.css\";\nimport loginNav from \"../../assets/loginNav.svg\";\nimport messagesNav from \"../../assets/messagesNav.svg\";\nimport profileNav from \"../../assets/profileNav.svg\";\nimport usersNav from \"../../assets/usersNav.svg\";\n\nconst links = [\n  {\n    url: \"/profile\",\n    name: \"Profile\",\n    img: { backgroundImage: `url(${profileNav})` },\n  },\n  {\n    url: \"/dialogs\",\n    name: \"Messages\",\n    img: { backgroundImage: `url(${messagesNav})` },\n  },\n  {\n    url: \"/Users\",\n    name: \"Users\",\n    img: { backgroundImage: `url(${usersNav})` },\n  },\n  {\n    url: \"/login\",\n    name: \"Login\",\n    img: { backgroundImage: `url(${loginNav})` },\n  },\n];\nconst Navbar = () => {\n  return (\n    <nav className={s.nav}>\n      {links.map((el) => (\n        <div className={s.itemContainer} key={el.url}>\n          <div className={s.img} style={el.img}></div>\n          <NavLink\n            to={el.url}\n            className={s.link}\n            activeClassName={s.activeLink}\n          >\n            {el.name}\n          </NavLink>\n        </div>\n      ))}\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import { AppActionsType, AppThunkType, RootStoreType } from \"./store\";\nimport { profileAPI } from \"../api/api\";\nimport { usersAPI } from \"../api/api\";\nimport { Dispatch } from \"redux\";\nimport { stopSubmit } from \"redux-form\";\nimport { ProfilePutTypes } from \"../api/types\";\n\nconst SET_STATUS = \"SET_STATUS\";\nconst DELETE_POST = \"DELETE_POST\";\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\";\n\nexport type AddPostActionType = {\n  type: \"ADD-POST\";\n  newPostText: string;\n};\nexport type UpdateNewPostTextActionType = {\n  type: \"UPDATE-NEW-POST-TEXT\";\n  text: string;\n};\nexport type SetUserProfileActionType = {\n  type: \"SET_USER_PROFILE\";\n  profile: ProfileType;\n};\nexport type SetStatusActionType = {\n  type: \"SET_STATUS\";\n  status: string;\n};\nexport type DeletePostType = {\n  type: \"DELETE_POST\";\n  postId: number;\n};\n\nexport type SavePhotoSuccessType = {\n  type: \"SAVE_PHOTO_SUCCESS\";\n  photos: PhotosType;\n};\nexport type PostsType = {\n  id: number;\n  message: string;\n  likesCount?: number;\n};\n\nexport type ProfilePageType = {\n  posts: Array<PostsType>;\n  profile: null | ProfileType;\n  status: string;\n};\n\nexport type ProfileType = {\n  userId: number;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ContactsType;\n  photos: PhotosType;\n  aboutMe: string;\n};\n\ntype PhotosType = {\n  small: string;\n  large: string;\n};\ntype ContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n};\n\nlet initialState: ProfilePageType = {\n  posts: [\n    { id: 1, message: \"Hi, how are you\", likesCount: 12 },\n    { id: 2, message: \"it's first\", likesCount: 24 },\n    { id: 3, message: \"yo\" },\n    { id: 4, message: \"yo\" },\n    { id: 5, message: \"yo\" },\n  ],\n  profile: null,\n  status: \"\",\n};\n\nexport type ProfileReducerActionsType =\n  | AddPostActionType\n  | UpdateNewPostTextActionType\n  | SetUserProfileActionType\n  | SetStatusActionType\n  | DeletePostType\n  | SavePhotoSuccessType;\n\nexport const profileReducer = (\n  state = initialState,\n  action: ProfileReducerActionsType\n): ProfilePageType => {\n  switch (action.type) {\n    case \"ADD-POST\":\n      return {\n        ...state,\n        posts: [\n          ...state.posts,\n          {\n            id: 5,\n            message: action.newPostText,\n            likesCount: 0,\n          },\n        ],\n      };\n    case \"SET_USER_PROFILE\": {\n      return { ...state, profile: action.profile };\n    }\n    case SET_STATUS: {\n      return { ...state, status: action.status };\n    }\n    case DELETE_POST: {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.id !== action.postId),\n      };\n    }\n    case SAVE_PHOTO_SUCCESS: {\n      return {\n        ...state,\n        //@ts-ignore\n        profile: { ...state.profile, photos: action.photos },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = (\n  newPostText: string\n): AddPostActionType => {\n  return {\n    type: \"ADD-POST\",\n    newPostText,\n  };\n};\n\nexport const setUserProfile = (\n  profile: ProfileType\n): SetUserProfileActionType => {\n  return {\n    type: \"SET_USER_PROFILE\",\n    profile,\n  };\n};\nexport const setStatusAC = (status: string): SetStatusActionType => {\n  return {\n    type: SET_STATUS,\n    status,\n  };\n};\nexport const deletePost = (postId: number): DeletePostType => {\n  return {\n    type: DELETE_POST,\n    postId,\n  };\n};\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessType => {\n  return {\n    type: SAVE_PHOTO_SUCCESS,\n    photos,\n  };\n};\n\n//THUNKS\nexport const getUserProfileThunkCreator = (userId: string): any => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    let response = await usersAPI.profileAPI(userId);\n    dispatch(setUserProfile(response.data));\n  };\n};\nexport const getStatusThunkCreator = (userId: string) => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    let response = await profileAPI.getStatus(userId);\n    dispatch(setStatusAC(response.data));\n  };\n};\nexport const updateStatusThunkCreator = (status: string) => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    let response = await profileAPI.updateStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setStatusAC(status));\n    }\n  };\n};\n\nexport const savePhoto = (file: File) => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    let response = await profileAPI.savePhoto(file);\n\n    if (response.data.resultCode === 0) {\n      dispatch(savePhotoSuccess(response.data.data.photos));\n    }\n  };\n};\nexport const saveProfile = (profile: ProfilePutTypes) => {\n  return async (dispatch: Dispatch<AppActionsType>, getState: () => any) => {\n    const userId = getState().auth.userId;\n    let response = await profileAPI.saveProfile(profile);\n    if (response.data.resultCode === 0) {\n      dispatch(getUserProfileThunkCreator(userId));\n    } else {\n      dispatch(\n        stopSubmit(\"edit-profile\", { _error: response.data.messages[0] })\n      );\n      return Promise.reject(response.data.messages[0]);\n    }\n  };\n};\n","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { TextArea } from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLen = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={TextArea}\r\n        name={\"addPost\"}\r\n        placeholder={\"enter text\"}\r\n        validate={[required, maxLen]}\r\n      />\r\n      <div>\r\n        <button>Add posts</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const AddNewPostFormRedux = reduxForm({ form: \"addPost\" })(\r\n  AddNewPostForm\r\n);\r\n","import React from \"react\";\nimport s from \"./Post.module.css\";\n\ntype PropsType = {\n  message: string\n  like: number | undefined\n}\n\nconst Post = (props: PropsType) => {\n  return (\n    <div className={s.item}>\n      <div>\n        <img src=\"https://i.ytimg.com/vi/o_26SGY83-I/movieposter_en.jpg\" />\n      </div>\n      {props.message}\n      <div>\n        <span>Like {props.like}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { PostsType, ProfilePageType } from \"../../../redux/profile-reducer\";\nimport {\n  maxLengthCreator,\n  required,\n} from \"../../../utils/validators/validators\";\nimport { AddNewPostFormRedux } from \"./AddNewPostForm\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\n\ntype PropsType = {\n  posts: Array<PostsType>;\n  newPostText: string;\n  updateNewPostText: (text: string) => void;\n  addPost: (newPostText: string) => void;\n};\n\nconst MyPosts = React.memo((props: PropsType) => {\n  console.log((\"render\"));\n  \n  let postsElements = props.posts.map((p: PostsType) => (\n    <Post key={p.id} message={p.message} like={p.likesCount} />\n  ));\n\n  let onSubmitHandler = (value: any) => {\n    props.addPost(value.addPost);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <AddNewPostFormRedux onSubmit={onSubmitHandler} />\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n});\n\nexport default MyPosts;\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\nimport { AppActionsType, RootStoreType } from \"../../../redux/store\";\nimport MyPosts from \"./MyPosts\";\n\nlet mapStateToProps = (state: RootStoreType) => {\n  return {\n    posts: state.profilePage.posts,\n  };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch<AppActionsType>) => {\n  return {\n    addPost: (newPostText: string) => {\n      dispatch(addPostActionCreator(newPostText));\n    },\n  };\n};\n\nconst MyPostsContainer: any = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, {\n  ChangeEvent,\n  ChangeEventHandler,\n  useEffect,\n  useState,\n} from \"react\";\n\nexport type ProfileStatusType = {\n  reduxStatus: any;\n  updateStatusThunkCreator: (status: string) => void;\n};\n\ntype StateType = {\n  editMode: boolean;\n  status: string;\n};\n\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\n  let [editMode, setEditMode] = useState(true);\n  let [status, setStatus] = useState(props.reduxStatus);\n\n  useEffect(() => {\n    setStatus(props.reduxStatus);\n  }, [props.reduxStatus]);\n\n  const activateEditMode = () => {\n    setEditMode(false);\n  };\n  const deactivateEditMode = () => {\n    setEditMode(true);\n    props.updateStatusThunkCreator(status);\n  };\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  };\n  return (\n    <div>\n      {editMode ? (\n        <div>\n          <span onDoubleClick={activateEditMode}>\n            <b>Status:</b> {props.reduxStatus || \"----\"}\n          </span>\n        </div>\n      ) : (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","export default __webpack_public_path__ + \"static/media/user.6e70c258.svg\";","import React from \"react\";\nimport { reduxForm } from \"redux-form\";\nimport {\n  createField,\n  Input,\n  TextArea,\n} from \"../../Common/FormsControls/FormsControls\";\nimport s from \"./ProfileInfo.module.css\";\nimport style from \"../../Common/FormsControls/FormsControls.module.css\";\n\nconst ProfileDataForm = ({ handleSubmit, profile, error }: any) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <button>save</button>\n      </div>\n      {error && <div className={style.formSubmissoinError}>{error}</div>}\n      <div>\n        <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\n      </div>\n      <div>\n        <b>Looking for a job</b>:\n        {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\n      </div>\n\n      <div>\n        <b>My professional skills</b>:\n        {createField(\n          \"My professional skills\",\n          \"lookingForAJobDescription\",\n          [],\n          TextArea\n        )}\n      </div>\n\n      <div>\n        <b>About me</b>:{createField(\"About me\", \"aboutMe\", [], TextArea)}\n      </div>\n      <div>\n        <b>Contacts</b>:\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <div key={key} className={s.contact}>\n              <b>\n                {key}: {createField(key, \"contacts.\" + key, [], Input)}\n              </b>\n            </div>\n          );\n        })}\n      </div>\n    </form>\n  );\n};\n\nconst ProfileDataFormReduxForm: any = reduxForm({ form: \"edit-profile\" })(\n  ProfileDataForm\n);\n\nexport default ProfileDataFormReduxForm;\n","import { ProfileType } from \"../../../redux/profile-reducer\";\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport s from \"./ProfileInfo.module.css\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/user.svg\";\nimport { ChangeEvent, useState } from \"react\";\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\nimport { profileAPI } from \"../../../api/api\";\n\nexport type ProfileInfoType = {\n  profile: any; // ProfileType\n  reduxStatus: string;\n  isOwner: boolean;\n  updateStatusThunkCreator: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProflie: any\n};\n\nconst ProfileInfo = ({\n  profile,\n  reduxStatus,\n  isOwner,\n  updateStatusThunkCreator,\n  savePhoto,\n  saveProflie,\n}: ProfileInfoType) => {\n  let [editMode, setEditMode] = useState<boolean>(false);\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n  const onSubmit = (formData: any) => {\n    console.log(formData);\n    \n    saveProflie(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\n        {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\n        {editMode ? (\n          <ProfileDataFormReduxForm\n            initialValue={profile}\n            profile={profile}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <ProfileData\n            goToEditMode={() => setEditMode(true)}\n            isOwner={isOwner}\n            profile={profile}\n          />\n        )}\n        <ProfileStatusWithHooks\n          reduxStatus={reduxStatus}\n          updateStatusThunkCreator={updateStatusThunkCreator}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }: any) => {\n  return (\n    <div>\n      {isOwner && <button onClick={goToEditMode}>Edit</button>}\n      <div>\n        <b>Full name</b>: {profile.fullName}\n      </div>\n      <div>\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n      {profile.lookingForAJob && (\n        <div>\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n      )}\n      <div>\n        <b>About me</b>: {profile.aboutMe}\n      </div>\n      <div>\n        <b>Contacts</b>:{\" \"}\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst Contact = ({ contactTitle, contactValue }: any) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b>: {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport { ProfilePutTypes } from \"../../api/types\";\nimport { ProfilePageType, ProfileType } from \"../../redux/profile-reducer\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport s from \"./Profile.module.css\";\nimport ProfileInfo, { ProfileInfoType } from \"./ProfileInfo/ProfileInfo\";\n\ntype ProfilePropsType = {\n  profile: ProfileType;\n  isAuth?: boolean;\n  reduxStatus: string;\n  isOwner: boolean;\n  updateStatusThunkCreator: (string: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (data: ProfilePutTypes) => void;\n};\n\nconst Profile = (props: ProfilePropsType) => {\n  return (\n    <div className={s.content}>\n      <ProfileInfo\n        saveProflie={props.saveProfile}\n        savePhoto={props.savePhoto}\n        isOwner={props.isOwner}\n        profile={props.profile}\n        reduxStatus={props.reduxStatus}\n        updateStatusThunkCreator={props.updateStatusThunkCreator}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useEffect } from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  updateStatusThunkCreator,\n  getStatusThunkCreator,\n  getUserProfileThunkCreator,\n  savePhoto,\n  saveProfile,\n  ProfileType,\n} from \"../../redux/profile-reducer\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { RootStoreType } from \"../../redux/store\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport Preloader from \"../Common/Preloader/Preloader\";\nimport { ProfilePutTypes } from \"../../api/types\";\n\ntype PathParamsType = {\n  userId: string | undefined;\n};\n\ntype MapStatePropsType = {\n  profile?: ProfileType | null;\n  isAuth?: boolean;\n  reduxStatus: string;\n  authorizedUserId: string | null;\n};\ntype MapDispatchPropsType = {\n  setUserProfile: (profile: ProfileType) => void;\n  getUserProfileThunkCreator: (userId: string) => void;\n  getStatusThunkCreator: (userId: string) => void;\n  updateStatusThunkCreator: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (data: ProfilePutTypes) => void;\n};\n\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType;\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\n\nclass ProfileContainer extends React.Component<PropsType, {}> {\n  refreshProfile() {\n    let userId: any = this.props.match.params.userId;\n    console.log(userId);\n\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.getUserProfileThunkCreator(userId);\n    this.props.getStatusThunkCreator(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    if (!this.props.profile) {\n      return <Preloader />;\n    }\n\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        reduxStatus={this.props.reduxStatus}\n        updateStatusThunkCreator={this.props.updateStatusThunkCreator}\n        savePhoto={this.props.savePhoto}\n        saveProfile={this.props.saveProfile}\n      />\n    );\n  }\n}\n\nlet mapStateToProps = (state: RootStoreType): MapStatePropsType => ({\n  profile: state.profilePage.profile,\n  reduxStatus: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n});\n\nexport const WithProfileContainer: any = compose(\n  withAuthRedirect,\n  connect(mapStateToProps, {\n    getUserProfileThunkCreator,\n    getStatusThunkCreator,\n    updateStatusThunkCreator,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter\n)(ProfileContainer);\n","import { createSelector } from \"reselect\";\r\nimport { RootStoreType } from \"./store\";\r\n\r\nexport const getUsersSelector = (state: RootStoreType) => {\r\n  return state.userPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter((u) => true);\r\n});\r\nexport const getPageSize = (state: RootStoreType) => {\r\n  return state.userPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: RootStoreType) => {\r\n  return state.userPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: RootStoreType) => {\r\n  return state.userPage.currentPage;\r\n};\r\nexport const getIsFetching = (state: RootStoreType) => {\r\n  return state.userPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: RootStoreType) => {\r\n  return state.userPage.followingInProgress;\r\n};\r\n","import { UsersType } from \"../redux/users-reducer\";\r\n\r\nexport const updateObjectInArray = (\r\n  items: any,\r\n  itemId: number,\r\n  objPropName: string,\r\n  newObjProps: { followed: boolean }\r\n) => {\r\n  return items.map((u: any) => {\r\n    if (u[objPropName] === itemId) {\r\n      return { ...u, ...newObjProps };\r\n    }\r\n    return u;\r\n  });\r\n};\r\n","import { ResponseType } from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../utils/object-helpers\";\nimport { AppActionsType } from \"./store\";\n\nexport type UsersType = {\n  id: number;\n  photoUrl: string;\n  followed: boolean;\n  name: string;\n  status: string;\n  uniqueUrlName: null;\n  photos: { small: string |null; large: null };\n};\n\nconst FOLLOWING_IN_PROGRESS = \"FOLLOWING_IN_PROGRESS\";\n\nexport type FollowActionType = {\n  type: \"FOLLOW\";\n  userId: number;\n};\nexport type UnFollowActionType = {\n  type: \"UNFOLLOW\";\n  userId: number;\n};\nexport type SetUsersType = {\n  type: \"SET_USERS\";\n  users: Array<UsersType>;\n};\nexport type SetCurrentPageAction = {\n  type: \"SET_CURRENT_PAGE\";\n  currentPage: number;\n};\nexport type SetTotalUsersCountActionType = {\n  type: \"SET_TOTAL_USERS_COUNT\";\n  totalUsersCount: number;\n};\nexport type ToggleIsFetchingType = {\n  type: \"TOGGLE_IS_FETCHING\";\n  isFetching: boolean;\n};\nexport type FollowingInProgressType = {\n  type: \"FOLLOWING_IN_PROGRESS\";\n  isFetching: boolean;\n  userId: number;\n};\n\nexport type UserPageType = {\n  users: [] | Array<UsersType>;\n  pageSize: number;\n  totalUsersCount: number;\n  currentPage: number;\n  isFetching: boolean;\n  followingInProgress: any;\n};\n\nexport type UserReducerActionsType =\n  | FollowActionType\n  | UnFollowActionType\n  | SetUsersType\n  | SetCurrentPageAction\n  | SetTotalUsersCountActionType\n  | ToggleIsFetchingType\n  | FollowingInProgressType;\n\nlet initialState: UserPageType = {\n  users: [],\n  pageSize: 8,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [],\n};\n\nexport const userReducer = (\n  state = initialState,\n  action: UserReducerActionsType\n): UserPageType => {\n  switch (action.type) {\n    case \"FOLLOW\": {\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        }),\n      };\n    }\n    case \"UNFOLLOW\": {\n      console.log(\n        updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        })\n      );\n\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true,\n        }),\n      };\n    }\n    case \"SET_USERS\": {\n      return { ...state, users: action.users };\n    }\n    case \"SET_CURRENT_PAGE\": {\n      return { ...state, currentPage: action.currentPage };\n    }\n    case \"SET_TOTAL_USERS_COUNT\": {\n      return { ...state, totalUsersCount: action.totalUsersCount };\n    }\n    case \"TOGGLE_IS_FETCHING\": {\n      return { ...state, isFetching: action.isFetching };\n    }\n    case FOLLOWING_IN_PROGRESS: {\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter(\n              (id: number) => id !== action.userId\n            ),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = (userId: number): FollowActionType => {\n  return {\n    type: \"FOLLOW\",\n    userId,\n  };\n};\nexport const unFollowSuccess = (userId: number): UnFollowActionType => {\n  return {\n    type: \"UNFOLLOW\",\n    userId,\n  };\n};\nexport const setUsers = (users: UsersType[]): SetUsersType => {\n  return {\n    type: \"SET_USERS\",\n    users,\n  };\n};\nexport const setCurrentPage = (currentPage: number): SetCurrentPageAction => {\n  return {\n    type: \"SET_CURRENT_PAGE\",\n    currentPage,\n  };\n};\nexport const setTotalUsersCount = (\n  totalUsersCount: number\n): SetTotalUsersCountActionType => {\n  return {\n    type: \"SET_TOTAL_USERS_COUNT\",\n    totalUsersCount,\n  };\n};\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingType => {\n  return {\n    type: \"TOGGLE_IS_FETCHING\",\n    isFetching,\n  };\n};\nexport const followingInProgressAC = (\n  isFetching: boolean,\n  userId: number\n): FollowingInProgressType => {\n  return {\n    type: FOLLOWING_IN_PROGRESS,\n    userId,\n    isFetching,\n  };\n};\n\n//THUNKS\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(currentPage));\n    let data = await usersAPI.getUsers(currentPage, pageSize);\n\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    console.log(data.items);\n\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\nconst followUnFollowFlow = async (\n  dispatch: Dispatch<AppActionsType>,\n  userId: number,\n  apiMethod: (userId: number) => void,\n  actionCreator: (userId: number) => UserReducerActionsType\n) => {\n  dispatch(followingInProgressAC(true, userId));\n  let response: any = await apiMethod(userId);\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(followingInProgressAC(false, userId));\n};\n\nexport const follow = (userId: number) => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    followUnFollowFlow(\n      dispatch,\n      userId,\n      usersAPI.follow.bind(usersAPI),\n      followSuccess\n    );\n  };\n};\n\nexport const unFollow = (userId: number) => {\n  return async (dispatch: Dispatch<AppActionsType>) => {\n    followUnFollowFlow(\n      dispatch,\n      userId,\n      usersAPI.unFollow.bind(usersAPI),\n      unFollowSuccess\n    );\n  };\n};\n","export default __webpack_public_path__ + \"static/media/rightArrow.c1f9939a.svg\";","export default __webpack_public_path__ + \"static/media/leftArrow.48e7b1ac.svg\";","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport s from \"./Paginator.module.css\";\nimport rightArrowImg from \"../../../assets/rightArrow.svg\";\nimport leftArrowImg from \"../../../assets/leftArrow.svg\";\n\ntype UsersContainerPropsType = {\n  pageSize: number;\n  currentPage: number;\n  totalUsersCount: number;\n  onPageChanged: (pageNumber: number) => void;\n  isAuth: boolean;\n  portionSize?: number;\n};\n\nconst Paginator = ({\n  totalUsersCount,\n  pageSize,\n  currentPage,\n  isAuth,\n  onPageChanged,\n  portionSize = 10,\n}: UsersContainerPropsType) => {\n  const rightArrow = { backgroundImage: `url(${rightArrowImg})` };\n  const leftArrow = { backgroundImage: `url(${leftArrowImg})` };\n\n  let pagesCount = Math.ceil(totalUsersCount / pageSize);\n\n  let pages = [];\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n\n  if (isAuth === false) return <Redirect to={\"/login\"} />;\n\n  return (\n    <div className={s.paginator}>\n      <div className={s.arrowLeftContainer}>\n        {portionNumber > 1 && (\n          <button\n          style={leftArrow}\n            className={s.arrowLeft}\n            onClick={() => {\n              setPortionNumber(portionNumber - 1);\n            }}\n          ></button>\n        )}\n      </div>\n      <div className={s.pages}>\n        {pages\n          .filter(\n            (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber\n          )\n          .map((p) => {\n            return (\n              <div\n                className={\n                  currentPage === p ? `${s.selectedPage} ${s.page}` : s.page\n                }\n                key={p}\n                onClick={(e) => {\n                  onPageChanged(p);\n                }}\n              >\n                {p}\n              </div>\n            );\n          })}\n      </div>\n      <div className={s.arrowRightContainer}>\n        {portionCount > portionNumber && (\n          <button\n            style={rightArrow}\n            className={s.arrowRight}\n            onClick={() => {\n              setPortionNumber(portionNumber + 1);\n            }}\n          >\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Paginator;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { UsersType } from \"../../redux/users-reducer\";\nimport s from \"./User.module.css\";\nimport userPhoto from \"../../assets/user.svg\";\n\ntype UsersContainerPropsType = {\n  user: UsersType;\n  follow: (id: number) => void;\n  unFollow: (id: number) => void;\n  followingInProgress: any;\n};\n\nconst User = ({\n  user,\n  followingInProgress,\n  follow,\n  unFollow,\n}: UsersContainerPropsType) => {\n  console.log(user);\n\n  return (\n    <div className={s.userPage}>\n      <div className={s.avatar}>\n        <NavLink to={`/profile/${user.id}`}>\n          <img\n            src={user.photos.small !== null ? user.photos.small : userPhoto}\n            className={s.userPhoto}\n          />\n        </NavLink>\n      </div>\n      <div className={s.userInfo}>\n        <div className={s.userName}>{user.name}</div>\n        <div className={s.userId}>Id | {user.id}</div>\n      </div>\n      <div className={s.buttonContainer}>\n        {user.followed ? (\n          <button\n            className={s.buttonFollowUnfollow}\n            disabled={followingInProgress.some((id: number) => id !== user.id)}\n            onClick={() => {\n              unFollow(user.id);\n            }}\n          >\n            Unfollow\n          </button>\n        ) : (\n          <button\n            className={s.buttonFollowUnfollow}\n            disabled={followingInProgress.some((id: number) => id !== user.id)}\n            onClick={() => {\n              follow(user.id);\n            }}\n          >\n            Follow\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n","import React from \"react\";\nimport { UsersType } from \"../../redux/users-reducer\";\nimport Paginator from \"../Common/Paginator/Paginator\";\nimport User from \"./User\";\nimport s from \"./Users.module.css\";\n\ntype UsersContainerPropsType = {\n  users: Array<UsersType>;\n  pageSize: number;\n  currentPage: number;\n  totalUsersCount: number;\n  followingInProgress: any;\n  isAuth: boolean;\n  follow: (id: number) => void;\n  unFollow: (id: number) => void;\n  onPageChanged: (pageNumber: number) => void;\n  followingInProgressAC: (isFetching: boolean, userId: number) => void;\n};\n\nconst Users = ({\n  totalUsersCount,\n  pageSize,\n  currentPage,\n  isAuth,\n  users,\n  onPageChanged,\n  ...props\n}: UsersContainerPropsType) => {\n  return (\n    <div className={s.usersPageContainer}>\n      <div className={s.userContainer}>\n        {users.map((u: UsersType) => {\n          return (\n            <div className={s.user}>\n              <User\n                key={u.id}\n                user={u}\n                followingInProgress={props.followingInProgress}\n                follow={props.follow}\n                unFollow={props.unFollow}\n              />\n            </div>\n          );\n        })}\n      </div>\n      <Paginator\n        pageSize={pageSize}\n        currentPage={currentPage}\n        totalUsersCount={totalUsersCount}\n        onPageChanged={onPageChanged}\n        isAuth={isAuth}\n      />\n    </div>\n  );\n};\n\nexport default Users;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { RootStoreType } from \"../../redux/store\";\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getIsFetching,\n  getPageSize,\n  getTotalUsersCount,\n  getUsers,\n} from \"../../redux/users-selectors\";\nimport {\n  follow,\n  followingInProgressAC,\n  getUsersThunkCreator,\n  setCurrentPage,\n  unFollow,\n  UsersType,\n} from \"../../redux/users-reducer\";\nimport Preloader from \"../Common/Preloader/Preloader\";\nimport Users from \"./Users\";\n\ntype UsersContainerType = {\n  users: Array<UsersType>;\n  pageSize: number;\n  currentPage: number;\n  totalUsersCount: number;\n  isFetching: boolean;\n  followingInProgress: any;\n  isAuth: boolean;\n  setCurrentPage: (pageNumber: number) => void;\n  follow: (id: number) => void;\n  unFollow: (id: number) => void;\n  followingInProgressAC: (isFetching: boolean, userId: number) => void;\n  getUsersThunkCreator: (currentPage: number, pageSize: number) => void;\n};\n\nclass UsersContainer extends React.Component<UsersContainerType, {}> {\n  componentDidMount() {\n    const { pageSize, currentPage } = this.props;\n\n    this.props.getUsersThunkCreator(currentPage, pageSize);\n  }\n\n  onPageChanged = (pageNumber: number) => {\n    const { pageSize } = this.props;\n    this.props.getUsersThunkCreator(pageNumber, pageSize);\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.isFetching ? <Preloader /> : null}\n        <Users\n          isAuth={this.props.isAuth}\n          followingInProgress={this.props.followingInProgress}\n          followingInProgressAC={followingInProgressAC}\n          totalUsersCount={this.props.totalUsersCount}\n          pageSize={this.props.pageSize}\n          onPageChanged={this.onPageChanged}\n          currentPage={this.props.currentPage}\n          users={this.props.users}\n          unFollow={this.props.unFollow}\n          follow={this.props.follow}\n        />\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state: RootStoreType) => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUsersCount: getTotalUsersCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default compose(\n  // withAuthRedirect,\n  connect(mapStateToProps, {\n    follow,\n    unFollow,\n    setCurrentPage,\n    followingInProgressAC,\n    getUsersThunkCreator,\n  })\n)(UsersContainer);\n","import { Dispatch } from \"redux\";\nimport { authAPI } from \"../api/api\";\nimport { getAuthUserDataThunkCreator } from \"./auth-reducer\";\nimport { AppActionsType, AppThunkType } from \"./store\";\n\nlet INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\n\nexport type AppInitializedState = {\n  initialized: boolean;\n};\n\nlet initialState: AppInitializedState = {\n  initialized: false,\n};\n\nexport const appReducer = (\n  state = initialState,\n  action: AppReducerActionsType\n): AppInitializedState => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS: {\n      return { ...state, initialized: true };\n    }\n    default:\n      return state;\n  }\n};\n\nexport type AppReducerActionsType = initializedSuccessType;\n\ntype initializedSuccessType = ReturnType<typeof initializedSuccess>;\n\nexport const initializedSuccess = () => {\n  return {\n    type: INITIALIZED_SUCCESS,\n  };\n};\n\nexport const initializeApp = () => {\n  return (dispatch: Dispatch<any>) => {\n    let promise = dispatch(getAuthUserDataThunkCreator());\n    Promise.all([promise]).then(() => {\n      dispatch(initializedSuccess());\n    });\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route, Switch, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport \"./App.css\";\nimport Preloader from \"./components/Common/Preloader/Preloader\";\nimport { DialogsContainer } from \"./components/Dialogs/DialogsContainer\";\nimport { HeaderContainerWrap } from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport { WithProfileContainer } from \"./components/Profile/ProfileContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport { RootStoreType } from \"./redux/store\";\n\ntype PropsType = {\n  initializeApp: () => void;\n  initialized: boolean;\n};\n\nclass App extends React.Component<PropsType> {\n  catchAllUnHandledErrors = () => {\n    alert(\"some error\");\n  };\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnHandledErrors);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnHandledErrors\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />;\n    }\n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainerWrap />\n        <Navbar />\n        <div className=\"app-wrapper-content\">\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"} />} />\n            <Route path=\"/dialogs\" render={() => <DialogsContainer />} />\n            <Route\n              path=\"/profile/:userId?\"\n              render={() => <WithProfileContainer />}\n            />\n            <Route path=\"/users\" component={UsersContainer} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state: RootStoreType) => {\n  return { initialized: state.app.initialized };\n};\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk, { ThunkAction } from \"redux-thunk\";\nimport { authReducer, AuthReducerActionsType } from \"./auth-reducer\";\nimport { dialogReducer, DialogsReducerActionsType } from \"./dialogs-reducer\";\nimport { profileReducer, ProfileReducerActionsType } from \"./profile-reducer\";\nimport { userReducer, UserReducerActionsType } from \"./users-reducer\";\nimport { reducer as formReducer } from \"redux-form\";\nimport { appReducer, AppReducerActionsType } from \"./app-reducer\";\n\nlet reducers = combineReducers({\n  profilePage: profileReducer,\n  messagesPage: dialogReducer,\n  userPage: userReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n});\n\nexport type RootStoreType = ReturnType<typeof reducers>;\n\nexport type AppActionsType =\n  | AppReducerActionsType\n  | AuthReducerActionsType\n  | DialogsReducerActionsType\n  | ProfileReducerActionsType\n  | UserReducerActionsType;\n\nexport type AppThunkType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootStoreType,\n  unknown,\n  AppActionsType\n>;\n\nlet store = createStore(reducers, applyMiddleware(thunk));\n\n// @ts-ignore\nwindow.store = store;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store.ts\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1-OWX\",\"error\":\"FormsControls_error__9hqAk\",\"formSubmissoinError\":\"FormsControls_formSubmissoinError__Zw5gy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2aBSP\",\"logoImg\":\"Header_logoImg__1wtpB\",\"loginBlock\":\"Header_loginBlock__1pf-7\",\"loginBlockContainer\":\"Header_loginBlockContainer__X2UsU\",\"loginName\":\"Header_loginName__3mmga\",\"line\":\"Header_line__1oGww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__12L-I\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1r5dj\",\"contact\":\"ProfileInfo_contact__1Nr4E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2zCt2\",\"itemContainer\":\"Navbar_itemContainer__3rGWk\",\"link\":\"Navbar_link__256bs\",\"activeLink\":\"Navbar_activeLink__3myhE\",\"img\":\"Navbar_img__kubgk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPageContainer\":\"Users_usersPageContainer__1wBua\",\"userContainer\":\"Users_userContainer__3uXOx\",\"user\":\"Users_user__1ZMTn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Mc5B\",\"posts\":\"MyPosts_posts__LdFJw\"};"],"sourceRoot":""}